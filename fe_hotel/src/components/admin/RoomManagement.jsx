import React, { useState, useEffect, useMemo } from "react";
import { Row, Col, Table, Spinner, Alert, Form, Badge, Button, Modal } from "react-bootstrap";
import axios from "../../api/axiosInstance";
import RoomFormModal from "./RoomFormModal";

export default function RoomManagement() {
  const [rooms, setRooms] = useState([]);
  const [bedLayouts, setBedLayouts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  
  // Modal states
  const [showModal, setShowModal] = useState(false);
  const [editingRoom, setEditingRoom] = useState(null);

  // Load rooms and bed layouts
  useEffect(() => {
    loadRooms();
    loadBedLayouts();
  }, []);

  const loadRooms = async () => {
    setLoading(true);
    try {
      // Use admin endpoint to see ALL rooms (including hidden ones)
      const { data } = await axios.get("/rooms/admin/all");
      console.log("Loaded rooms:", data); // Debug log
      setRooms(Array.isArray(data) ? data : []);
      setError("");
    } catch (err) {
      setError(err?.response?.data?.message || err.message);
    } finally {
      setLoading(false);
    }
  };

  const loadBedLayouts = async () => {
    try {
      const { data } = await axios.get("/bed-layouts");
      if (Array.isArray(data) && data.length > 0) {
        setBedLayouts(data);
      } else {
        // Use fallback if empty
        useFallbackBedLayouts();
      }
    } catch (err) {
      console.error("Failed to load bed layouts:", err);
      // Fallback to hardcoded options
      useFallbackBedLayouts();
    }
  };

  const useFallbackBedLayouts = () => {
    setBedLayouts([
      { id: 1, layoutName: "1 Gi∆∞·ªùng ƒê√¥i L·ªõn" },
      { id: 2, layoutName: "2 Gi∆∞·ªùng ƒê∆°n" },
      { id: 3, layoutName: "1 Gi∆∞·ªùng ƒê√¥i" },
      { id: 4, layoutName: "3 Gi∆∞·ªùng ƒê∆°n" },
    ]);
  };

  // Search filter
  const filteredRooms = useMemo(() => {
    const q = searchQuery.toLowerCase();
    if (!q) return rooms;
    return rooms.filter(room =>
      [room.name, room.roomNumber, room.status, room.type]
        .filter(Boolean)
        .some(field => field.toString().toLowerCase().includes(q))
    );
  }, [rooms, searchQuery]);

  // Handlers
  const handleCreate = () => {
    setEditingRoom(null);
    setShowModal(true);
  };

  const handleEdit = (room) => {
    setEditingRoom(room);
    setShowModal(true);
  };

  const handleDelete = async (room) => {
    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ph√≤ng "${room.name}"?`)) return;

    try {
      await axios.delete(`/rooms/${room.id}`);
      await loadRooms();
      alert("X√≥a ph√≤ng th√†nh c√¥ng!");
    } catch (err) {
      const msg = err?.response?.data?.message || err?.response?.data || err.message || "X√≥a th·∫•t b·∫°i";
      alert(`X√≥a th·∫•t b·∫°i: ${typeof msg === 'object' ? JSON.stringify(msg) : msg}`);
      console.error("Delete error:", err);
    }
  };

  const handleToggleVisibility = async (room) => {
    const action = room.isVisible ? "·∫©n" : "hi·ªán";
    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën ${action} ph√≤ng "${room.name}"?`)) return;

    try {
      await axios.patch(`/rooms/${room.id}/visibility`, {
        isVisible: !room.isVisible
      });
      await loadRooms();
      alert(`${action.charAt(0).toUpperCase() + action.slice(1)} ph√≤ng th√†nh c√¥ng!`);
    } catch (err) {
      const msg = err?.response?.data?.message || err?.response?.data || err.message;
      alert(`Th·∫•t b·∫°i: ${typeof msg === 'object' ? JSON.stringify(msg) : msg}`);
      console.error("Toggle visibility error:", err);
    }
  };

  const handleStatusChange = async (room, newStatus) => {
    if (room.status === newStatus) return;

    const statusNames = {
      available: "C√≥ s·∫µn",
      occupied: "ƒêang s·ª≠ d·ª•ng",
      maintenance: "B·∫£o tr√¨"
    };

    const reason = newStatus === "maintenance" 
      ? prompt("L√Ω do b·∫£o tr√¨ (t√πy ch·ªçn):") 
      : null;

    if (newStatus === "maintenance" && reason === null) return; // User clicked cancel

    const confirmMsg = `Chuy·ªÉn tr·∫°ng th√°i ph√≤ng "${room.name}" t·ª´ "${statusNames[room.status]}" sang "${statusNames[newStatus]}"?`;
    if (!window.confirm(confirmMsg)) return;

    try {
      console.log("Sending request:", { roomId: room.id, status: newStatus, reason });
      await axios.patch(`/rooms/${room.id}/status`, {
        status: newStatus,
        reason: reason || undefined
      });
      await loadRooms();
      alert("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
    } catch (err) {
      console.error("Update status error:", err);
      console.error("Error response:", err?.response);
      const msg = err?.response?.data?.message || err?.response?.data || err.message;
      alert(`Th·∫•t b·∫°i: ${typeof msg === 'object' ? JSON.stringify(msg) : msg}`);
    }
  };

  const handleModalClose = () => {
    setShowModal(false);
    setEditingRoom(null);
  };

  const handleModalSuccess = () => {
    setShowModal(false);
    setEditingRoom(null);
    loadRooms();
  };

  // Status badge
  const StatusBadge = ({ status }) => {
    const variants = {
      available: "success",
      occupied: "warning",
      maintenance: "secondary",
      deleted: "danger"
    };
    return (
      <Badge bg={variants[status] || "info"} className="text-capitalize">
        {status === "available" ? "C√≤n tr·ªëng" :
         status === "occupied" ? "ƒê√£ ƒë·∫∑t" :
         status === "maintenance" ? "B·∫£o tr√¨" :
         status}
      </Badge>
    );
  };

  return (
    <>
      <Row className="mb-3">
        <Col md={6}>
          <Form.Control
            placeholder="T√¨m theo t√™n ph√≤ng, s·ªë ph√≤ng, tr·∫°ng th√°i..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </Col>
        <Col className="text-end">
          <Button variant="primary" onClick={handleCreate}>
            + Th√™m ph√≤ng m·ªõi
          </Button>
        </Col>
      </Row>

      {loading ? (
        <div className="py-5 text-center">
          <Spinner animation="border" /> ƒêang t·∫£i danh s√°ch ph√≤ng...
        </div>
      ) : error ? (
        <Alert variant="danger">L·ªói t·∫£i d·ªØ li·ªáu: {error}</Alert>
      ) : (
        <div className="table-responsive">
          <Table hover bordered size="sm" className="align-middle">
            <thead className="table-light">
              <tr>
                <th style={{ width: 80 }}>ID</th>
                <th>S·ªë ph√≤ng</th>
                <th>T√™n ph√≤ng</th>
                <th>Lo·∫°i gi∆∞·ªùng</th>
                <th>S·ª©c ch·ª©a</th>
                <th>Gi√°/ƒë√™m</th>
                <th>Tr·∫°ng th√°i</th>
                <th style={{ width: 100 }}>Hi·ªÉn th·ªã</th>
                <th style={{ width: 180 }}>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {filteredRooms.length === 0 ? (
                <tr>
                  <td colSpan={9} className="text-center text-muted py-4">
                    Kh√¥ng t√¨m th·∫•y ph√≤ng n√†o
                  </td>
                </tr>
              ) : (
                filteredRooms.map((room) => (
                  <tr key={room.id} style={{ opacity: room.isVisible === false ? 0.6 : 1 }}>
                    <td>{room.id}</td>
                    <td>{room.roomNumber || "-"}</td>
                    <td>{room.name || "-"}</td>
                    <td>{room.type || "-"}</td>
                    <td className="text-center">{room.capacity || "-"}</td>
                    <td>{room.priceVnd ? room.priceVnd.toLocaleString("vi-VN") + " ‚Ç´" : "-"}</td>
                    <td>
                      <Form.Select
                        size="sm"
                        value={room.status || "available"}
                        onChange={(e) => handleStatusChange(room, e.target.value)}
                        style={{ width: "140px" }}
                      >
                        <option value="available">‚úÖ C√≥ s·∫µn</option>
                        <option value="occupied">üîí ƒêang d√πng</option>
                        <option value="maintenance">üîß B·∫£o tr√¨</option>
                      </Form.Select>
                    </td>
                    <td className="text-center">
                      {room.isVisible !== false ? (
                        <Badge bg="success">Hi·ªÉn th·ªã</Badge>
                      ) : (
                        <Badge bg="secondary">·∫®n</Badge>
                      )}
                    </td>
                    <td className="text-nowrap">
                      <Button
                        size="sm"
                        variant={room.isVisible !== false ? "outline-warning" : "outline-success"}
                        className="me-1"
                        onClick={() => handleToggleVisibility(room)}
                        title={room.isVisible !== false ? "·∫®n ph√≤ng" : "Hi·ªán ph√≤ng"}
                      >
                        {room.isVisible !== false ? "üëÅÔ∏è ·∫®n" : "üëÅÔ∏è‚Äçüó®Ô∏è Hi·ªán"}
                      </Button>
                      <Button
                        size="sm"
                        variant="outline-primary"
                        className="me-1"
                        onClick={() => handleEdit(room)}
                      >
                        S·ª≠a
                      </Button>
                      <Button
                        size="sm"
                        variant="outline-danger"
                        onClick={() => handleDelete(room)}
                      >
                        X√≥a
                      </Button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </Table>
        </div>
      )}

      <RoomFormModal
        show={showModal}
        onHide={handleModalClose}
        onSuccess={handleModalSuccess}
        room={editingRoom}
        bedLayouts={bedLayouts}
      />
    </>
  );
}

